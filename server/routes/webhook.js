const express = require('express');
const router = express.Router();
const articleGeneratorService = require('../services/articleGeneratorService');
const { urlValidation } = require('../middleware/validator');

/**
 * POST /api/webhook/moviehunt
 * Webhook pour recevoir les notifications de nouvelles pages MovieHunt
 * 
 * Format attendu:
 * {
 *   "url": "https://moviehunt.fr/...",
 *   "event": "page.created",
 *   "timestamp": "2025-09-30T15:24:10+02:00"
 * }
 */
router.post('/moviehunt', urlValidation, async (req, res, next) => {
  try {
    const { url, event } = req.body;

    console.log(`üîî Webhook re√ßu: ${event} - ${url}`);

    // V√©rifier le type d'√©v√©nement
    if (event !== 'page.created' && event !== 'page.updated') {
      return res.status(400).json({
        success: false,
        error: 'Type d\'√©v√©nement non support√©',
      });
    }

    // G√©n√©rer l'article de mani√®re asynchrone
    articleGeneratorService.generateFromUrl(url, 'webhook')
      .then(result => {
        console.log(`‚úÖ Article g√©n√©r√© depuis webhook: ${result.article.title}`);
      })
      .catch(error => {
        console.error(`‚ùå Erreur de g√©n√©ration depuis webhook: ${error.message}`);
      });

    // R√©pondre imm√©diatement au webhook
    res.status(202).json({
      success: true,
      message: 'Webhook re√ßu, g√©n√©ration en cours',
    });
  } catch (error) {
    next(error);
  }
});

/**
 * GET /api/webhook/health
 * Endpoint de sant√© pour v√©rifier que le webhook fonctionne
 */
router.get('/health', (req, res) => {
  res.json({
    success: true,
    message: 'Webhook op√©rationnel',
    timestamp: new Date().toISOString(),
  });
});

module.exports = router;
